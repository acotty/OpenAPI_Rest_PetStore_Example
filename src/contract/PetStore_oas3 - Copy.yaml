openapi: 3.0.2
servers:
  - url: /v3
info:
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  version: 1.0.6-SNAPSHOT
  title: SwaggerPetstore-OpenAPI
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
  - name: pet
    description: Everything about your Pets
  - name: store
    description: Operations about user
  - name: user
    description: Access to Petstore orders


# Apply the following to all of the API's. Add additional security acess to this on a single API basis
security:
  - api_key: []
  - petstore_auth:
      - 'read:pets'

paths:
  /pet:
    x-exegesis-controller: Pet
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      security:
        - petstore_auth:
            - 'write:pets'
      requestBody:
        description: Create a new pet in the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: Successful operation
          x-gulp-swagger-codegen-outcome: success
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '405':
          description: Invalid input
          x-gulp-swagger-codegen-outcome: badInputError

    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      security:
        - petstore_auth:
            - 'write:pets'
      requestBody:
        description: Update an existent pet in the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: Successful operation
          x-gulp-swagger-codegen-outcome: success
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
          x-gulp-swagger-codegen-outcome: badRequestError
        '404':
          description: Pet not found
          x-gulp-swagger-codegen-outcome: notFoundError
        '405':
          description: Validation exception
          x-gulp-swagger-codegen-outcome: badInputError

  /pet/findByStatus:
    x-exegesis-controller: Pet
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      #security: # No additional security for this API, so uses global security settings
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
      responses:
        '200':
          description: successful operation
          x-gulp-swagger-codegen-outcome: success
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
          x-gulp-swagger-codegen-outcome: badRequestError

  /pet/findByTags:
    x-exegesis-controller: Pet
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: >-
        Multiple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags
      #security: # No additional security for this API, so uses global security settings
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          x-gulp-swagger-codegen-outcome: success
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
          x-gulp-swagger-codegen-outcome: badRequestError

  '/pet/{petId}':
    x-exegesis-controller: Pet
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      #security: # No additional security for this API, so uses global security settings
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          x-gulp-swagger-codegen-outcome: success
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
          x-gulp-swagger-codegen-outcome: badRequestError
        '404':
          description: Pet not found
          x-gulp-swagger-codegen-outcome: notFoundError

    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      security:
        - petstore_auth:
            - 'write:pets'
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
          x-gulp-swagger-codegen-outcome: badInputError

    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: ''
      operationId: deletePet
      security:
        - petstore_auth:
            - 'write:pets'
      parameters:
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          x-gulp-swagger-codegen-outcome: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid pet value
          x-gulp-swagger-codegen-outcome: badRequestError

  '/pet/{petId}/uploadImage':
    x-exegesis-controller: Pet
    post:
      tags:
        - pet
      summary: uploads an image
      description: ''
      operationId: uploadFile
      security:
        - petstore_auth:
            - 'write:pets'
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          x-gulp-swagger-codegen-outcome: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /store/inventory:
    x-exegesis-controller: Store
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      #security: # No additional security for this API, so uses global security settings
      responses:
        '200':
          description: successful operation
          x-gulp-swagger-codegen-outcome: success
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32

  /store/order:
    x-exegesis-controller: Store
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      security:
        - petstore_auth:
            - 'write:pets'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          x-gulp-swagger-codegen-outcome: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
          x-gulp-swagger-codegen-outcome: badInputError

  '/store/order/{orderId}':
    x-exegesis-controller: Store
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value <= 5 or > 10. Other values
        will generated exceptions
      operationId: getOrderById
      #security: # No additional security for this API, so uses global security settings
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          x-gulp-swagger-codegen-outcome: success
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
          x-gulp-swagger-codegen-outcome: badRequestError
        '404':
          description: Order not found
          x-gulp-swagger-codegen-outcome: notFoundError

    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with value < 1000. Anything above
        1000 or nonintegers will generate API errors
      operationId: deleteOrder
      security:
        - petstore_auth:
            - 'write:pets'
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
          x-gulp-swagger-codegen-outcome: badRequestError
        '404':
          description: Order not found
          x-gulp-swagger-codegen-outcome: orderNotFoundError

  /user:
    x-exegesis-controller: User
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      security:
        - petstore_auth:
            - 'write:pets'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
      responses:
        default:
          description: successful operation
          x-gulp-swagger-codegen-outcome: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'

  /user/createWithList:
    x-exegesis-controller: User
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: 'Creates list of users with given input array'
      operationId: createUsersWithListInput
      security:
        - petstore_auth:
            - 'write:pets'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          x-gulp-swagger-codegen-outcome: success
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation

  /user/login:
    x-exegesis-controller: User
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      #security: # No additional security for this API, so uses global security settings
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          x-gulp-swagger-codegen-outcome: success
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
          x-gulp-swagger-codegen-outcome: badRequestError

  /user/logout:
    x-exegesis-controller: User
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      #security: # No additional security for this API, so uses global security settings
      parameters: []
      responses:
        default:
          description: successful operation
          x-gulp-swagger-codegen-outcome: success

  '/user/{username}':
    x-exegesis-controller: User
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      security:
        - petstore_auth:
            - 'admin:pets'
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          x-gulp-swagger-codegen-outcome: success
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
          x-gulp-swagger-codegen-outcome: badRequestError
        '404':
          description: User not found
          x-gulp-swagger-codegen-outcome: notFoundError

    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      security:
        - petstore_auth:
            - 'write:pets'
            - 'admin:pets'
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          x-gulp-swagger-codegen-outcome: success

    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      security:
        - petstore_auth:
            - 'write:pets'
            - 'admin:pets'
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
          x-gulp-swagger-codegen-outcome: badRequestError
        '404':
          description: User not found
          x-gulp-swagger-codegen-outcome: notFoundError

  /Address:
    x-exegesis-controller: Address
    post:
      tags:
        - address
      summary: Add a new address to the store
      description: Add a new address to the store
      operationId: addAddress
      security:
        - petstore_auth:
            - 'write:pets'
      requestBody:
        description: Create a new address in the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
          application/xml:
            schema:
              $ref: '#/components/schemas/Address'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: Successful operation
          x-gulp-swagger-codegen-outcome: success
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Address'
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '405':
          description: Invalid input
          x-gulp-swagger-codegen-outcome: badInputError

    put:
      tags:
        - address
      summary: Update an existing address
      description: Update an existing address by addressId
      operationId: updateAddress
      security:
        - petstore_auth:
            - 'write:pets'
      requestBody:
        description: Update an existing address in the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
          application/xml:
            schema:
              $ref: '#/components/schemas/Address'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: Successful operation
          x-gulp-swagger-codegen-outcome: success
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Address'
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          description: Invalid ID supplied
          x-gulp-swagger-codegen-outcome: badRequestError
        '404':
          description: Address not found
          x-gulp-swagger-codegen-outcome: notFoundError
        '405':
          description: Validation exception
          x-gulp-swagger-codegen-outcome: badInputError

  /Address/{addressId}:
    x-exegesis-controller: Address
    get:
      tags:
        - address
      summary: Get address by addressID
      description: ''
      operationId: getAddressByID
      #security: # No additional security for this API, so uses global security settings
      parameters:
        - name: addressId
          in: path
          description: Address id to get
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          x-gulp-swagger-codegen-outcome: success
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Address'
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          description: Invalid addressID supplied
          x-gulp-swagger-codegen-outcome: badRequestError
        '404':
          description: Address not found
          x-gulp-swagger-codegen-outcome: notFoundError

    delete:
      tags:
        - address
      summary: Deletes an address
      description: 'Deletes an address in the store'
      operationId: deleteAddress
      security:
        - petstore_auth:
            - 'write:pets'
      parameters:
        - name: addressId
          in: path
          description: Address id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid address value
          x-gulp-swagger-codegen-outcome: badRequestError

externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'

components:
  schemas:
    Order:
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
          example: approved
        complete:
          type: boolean
      xml:
        name: order
      type: object
    Customer:
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          xml:
            wrapped: true
            name: addresses
      xml:
        name: customer
      type: object
    Address:
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: 94301
      xml:
        name: address
      type: object
    Category:
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
      type: object
    User:
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: 12345
        phone:
          type: string
          example: 12345
        userStatus:
          type: integer
          format: int32
          example: 1
          description: User Status
      xml:
        name: user
      type: object
    Tag:
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
      type: object
    Pet:
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
            xml:
              name: tag
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
      type: object
    ApiResponse:
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
      type: object
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        #implicit:
        authorizationCode:
          authorizationUrl: 'https://localhost:9443/oauth2/authorize'
          tokenUrl: 'http://localhost:9443/oauth2/token'
          scopes:
            'write:pets':  Grant wite access 
            'read:pets':   Grant read access 
            'admin:pets':  Grants admin access to admin operations
    api_key:
      type: apiKey
      name: api_key
      in: header
